import java.util.regex.Matcher
import java.util.stream.Collectors

def processCount = 20
def serviceCount = 10
def activityLaunchModeCounts = [
        'standard'      : 10,
        'singleTop'     : 5,
        'singleTask'    : 3,
        'singleInstance': 4
]

def comments = "generated by `gradlew genComponents`. DO NOT MODIFY"

def JessieStubComponents = "" +
        "\n/**" +
        "\n * $comments" +
        "\n */" +
        "\npackage cn.jessie.main" +
        "\n" +
        "\ninternal object JessieStubComponents {" +
        "\n    const val PROCESS_COUNT = $processCount" +
        "\n    const val SERVICE_COUNT = $serviceCount" +
        "\n    val ACTIVITY_LAUNCH_MODE_COUNTS = intArrayOf(" +
        activityLaunchModeCounts.values().stream()
                .map { it.toString() }
                .collect(Collectors.joining(", ")) +
        ")" +
        "\n" +
        "\n    fun getActivityClassName(processIndex: Int, launchMode: Int, number: Int): String {" +
        "\n        return \"cn.jessie.main.JessieStubActivities\\\$P\${processIndex}LM\${launchMode}N\$number\"" +
        "\n    }" +
        "\n" +
        "\n    fun getServiceClassName(processIndex: Int, number: Int): String {" +
        "\n        return \"cn.jessie.main.JessieStubServices\\\$P\$processIndex\"" +
        "\n    }" +
        "\n" +
        "\n    fun getProviderAuthority(processIndex: Int): String {" +
        "\n        return cn.jessie.main.MainAppContext.packageName + \".jc\" + processIndex" +
        "\n    }" +
        "\n" +
        "\n}"

def JessieStubActivities = "" +
        "\n/**" +
        "\n * $comments" +
        "\n */" +
        "\npackage cn.jessie.main" +
        "\n" +
        "\nobject JessieStubActivities {" +
        "\n    abstract class Base : cn.jessie.app.activity.JessieStubActivity()" +
        "\n    class P%dLM%dN%d : Base()".with { format ->
            (0..processCount - 1).stream().map { process ->
                (0..activityLaunchModeCounts.size() - 1).stream().map { index ->
                    def count = activityLaunchModeCounts.values()[index]
                    (0..count - 1).stream().map { n ->
                        String.format(format, process, index, n)
                    }.collect(Collectors.joining())
                }.collect(Collectors.joining())
            }.collect(Collectors.joining())
        } +
        "\n}"

def JessieStubServices = "" +
        "\n/**" +
        "\n * $comments" +
        "\n */" +
        "\npackage cn.jessie.main" +
        "\n" +
        "\nobject JessieStubServices {" +
        "\n    abstract class Base : cn.jessie.app.service.JessieStubService()" +
        "\n    class P%d : Base()".with { format ->
            (0..processCount - 1).stream().map {
                String.format(format, it)
            }.collect(Collectors.joining())
        } +
        "\n}"

def JessieStubProviders = "" +
        "\n/**" +
        "\n * $comments" +
        "\n */" +
        "\npackage cn.jessie.main" +
        "\n" +
        "\nobject JessieStubProviders {" +
        "\n    abstract class Base : cn.jessie.app.provider.JessieStubProvider()" +
        "\n    class P%d : Base()".with { format ->
            (0..processCount - 1).stream().map {
                String.format(format, it)
            }.collect(Collectors.joining())
        } +
        "\n}"

def manifestComponents = "" +
        "\n" +
        "\n        <!-- region gen manifest -->" +
        "\n        <!-- $comments -->" + ("" +
        "\n        <activity" +
        "\n            android:name=\".main.JessieStubActivities\$P%dLM%dN%d\"" +
        "\n            android:launchMode=\"%s\"" +
        "\n            android:process=\":jc%1\$d\" />")
        .with { format ->
            (0..processCount - 1).stream().map { process ->
                (0..activityLaunchModeCounts.size() - 1).stream().map { index ->
                    def entrySet = activityLaunchModeCounts.entrySet()[index]
                    def launchMode = entrySet.key
                    def count = entrySet.value
                    (0..count - 1).stream().map { n ->
                        String.format(format, process, index, n, launchMode)
                    }.collect(Collectors.joining())
                }.collect(Collectors.joining())
            }.collect(Collectors.joining())
        } + ("" +
        "\n        <service " +
        "\n            android:name=\".main.JessieStubServices\$P%d\"" +
        "\n            android:process=\":jc%1\$d\" />")
        .with { format ->
            (0..serviceCount - 1).stream().map {
                String.format(format, it)
            }.collect(Collectors.joining())
        } + ("" +
        "\n        <provider" +
        "\n            android:name=\".main.JessieStubProviders\$P%d\"" +
        "\n            android:authorities=\"\${applicationId}.jc%1\$d\"" +
        "\n            android:exported=\"false\"" +
        "\n            android:process=\":jc%1\$d\" />")
        .with { format ->
            (0..processCount - 1).stream().map {
                String.format(format, it)
            }.collect(Collectors.joining())
        } +
        "\n        <!-- endregion -->"

task genComponents {
    group 'jessie'
    doLast {
        try {
            def classDirectory = project.file("src/main/java/cn/jessie/main")
            new File(classDirectory, "JessieStubComponents.kt").write(JessieStubComponents)
            new File(classDirectory, "JessieStubActivities.kt").write(JessieStubActivities)
            new File(classDirectory, "JessieStubServices.kt").write(JessieStubServices)
            new File(classDirectory, "JessieStubProviders.kt").write(JessieStubProviders)

            def manifestFile = project.file("src/main/AndroidManifest.xml")
            def manifestText = manifestFile.newInputStream().newReader().withCloseable { it.text }
                    .replaceAll("\\n\\s*<!-- region gen manifest -->[\\s\\S]*<!-- endregion -->",
                            Matcher.quoteReplacement(manifestComponents))
            manifestFile.newOutputStream().newWriter().withCloseable { it.write(manifestText) }
        } catch (Throwable e) {
            e.printStackTrace()
        }
    }
}

