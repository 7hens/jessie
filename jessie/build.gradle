apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'maven-publish'
apply from: 'components.gradle'

group = "com.github.7hens"
version = "-SNAPSHOT"

android {
    compileSdkVersion 28

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles 'proguard-rules.pro'
    }
    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }
    lintOptions {
        abortOnError false
        disable 'WrongConstant'
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
    compileOnly project(':jessie:android-hide')
    implementation 'com.github.7hens:okbinder:1.0'
    implementation 'cn.thens:okparcelable:0.1.0'
    implementation 'com.github.7hens:logdog:0.4'

    testImplementation 'junit:junit:4.12'
    testImplementation 'org.mockito:mockito-core:2.22.0'
    testImplementation 'org.robolectric:robolectric:4.2.1'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
}

def shell = { String cmd ->
    println "\$ $cmd"
    def process = cmd.execute()
    def thread = { runnable -> new Thread(runnable).start() }
    thread { process.inputStream.eachLine { println ">> $it" } }
    thread { process.errorStream.eachLine { System.err.println ">> $it" } }
    process.waitForOrKill(10000)
}

def androidHookJar = file("src/main/assets/jessie/android-hook.jar")

task upgradeHook {
    group 'build setup'
    dependsOn rootProject.tasks.findByPath(":jessie:android-hook:assembleDebug")
    doLast {
        def hookBuildDir = rootProject.file("jessie/android-hook/build")
        def input = new File(hookBuildDir, "intermediates/aar_main_jar/debug/classes.jar")

        androidHookJar.parentFile.mkdirs()
        androidHookJar.delete()

        def androidHome = android.sdkDirectory
        def dexHome = new File(androidHome, "build-tools").listFiles().sort().last()
        def dex = new File(dexHome, "d8.bat")
        if (!dex.exists()) dex = new File(dexHome, "d8")
        shell "$dex --output=$androidHookJar $input"
    }
}

afterEvaluate {
    if (!androidHookJar.exists()) {
        tasks.preBuild.dependsOn upgradeHook
    }
}